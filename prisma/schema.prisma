// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  user
  admin
}

model User {
  id        Int        @id @default(autoincrement())
  name      String     @db.VarChar(255)
  email     String     @unique
  role      UserRole   @default(user)
  password  String     @db.VarChar(60)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Checkout  Checkout[]

  @@map("users")
}

model Movie {
  id          Int           @id @default(autoincrement())
  title       String        @db.VarChar(255)
  description String        @db.Text
  posterImage String        @db.Text
  genders     Gender[]      @relation("MovieGender")
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  MovieGender MovieGender[]
  ShowTime    ShowTime[]
  deletedAt   DateTime?

  @@map("movies")
}

model Gender {
  id          Int           @id @default(autoincrement())
  name        String        @db.VarChar(255)
  movies      Movie[]       @relation("MovieGender")
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  MovieGender MovieGender[]

  @@map("genders")
}

model MovieGender {
  id        Int      @id @default(autoincrement())
  movieId   Int
  genderId  Int
  movie     Movie    @relation(fields: [movieId], references: [id])
  gender    Gender   @relation(fields: [genderId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([movieId, genderId])
  @@map("movie_genders")
}

model Room {
  id          Int        @id @default(autoincrement())
  name        String     @db.VarChar(50)
  isAvailable Boolean
  seats       Seat[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  ShowTime    ShowTime[]

  @@unique([name])
  @@map("rooms")
}

enum SeatType {
  REGULAR
  VIP
}

model Seat {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(5)
  isAvailable Boolean
  seatType    SeatType
  roomId      Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  room        Room          @relation(fields: [roomId], references: [id])
  Reservation Reservation[]

  @@map("seats")
}

model ShowTime {
  id           Int      @id @default(autoincrement())
  roomId       Int
  movieId      Int
  priceRegular Decimal  @db.Decimal(10, 2)
  priceVIP     Decimal  @db.Decimal(10, 2)
  isActive     Boolean
  startTime    DateTime
  endTime      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  movie       Movie         @relation(fields: [movieId], references: [id])
  room        Room          @relation(fields: [roomId], references: [id])
  Reservation Reservation[]

  @@index([startTime])
  @@map("show_times")
}

enum CheckoutStatus {
  PENDING
  COMPLETED
  CANCELED
}

model Checkout {
  id         Int            @id @default(autoincrement())
  userId     Int
  totalPrice Decimal        @db.Decimal(10, 2)
  status     CheckoutStatus @default(PENDING)
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  canceledAt DateTime?

  user        User          @relation(fields: [userId], references: [id])
  Reservation Reservation[]

  @@map("checkouts")
}

model Reservation {
  id         Int      @id @default(autoincrement())
  seatId     Int
  showTimeId Int
  checkoutId Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  seat     Seat     @relation(fields: [seatId], references: [id])
  showTime ShowTime @relation(fields: [showTimeId], references: [id])
  checkout Checkout @relation(fields: [checkoutId], references: [id])

  @@unique([seatId, showTimeId])
  @@map("reservations")
}
